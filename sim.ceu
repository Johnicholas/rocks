// - bug play no inicio
// - async vs async_ (testar async no jogo!)
// - tests para pause/async
// - bug pontuacao!

input void SDL_QUIT_;
input int  SDL_DT_;
input _SDL_KeyboardEvent* SDL_KEYDOWN_;
input _SDL_KeyboardEvent* SDL_KEYUP_;

var _SDL_Window* win;
    finalize
        win = _SDL_CreateWindow("Rocks!", _SDL_WINDOWPOS_CENTERED,
                                          _SDL_WINDOWPOS_CENTERED,
                                          1280, 800,
                                          _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(win);
    end
_SDL_GetWindowSize(win, &_REN_W, &_REN_H);

finalize
    _REN = _SDL_CreateRenderer(win, -1, 0);
with
    _SDL_DestroyRenderer(_REN);
end

native do
    unsigned int* RAND_SEED;
    #define rand() rand_r(RAND_SEED)

    int TIME1 = 3;
    int TIME2 = 3;
end

class App with
    event int ok;
do
    var uint seed = 0;
    _RAND_SEED := &seed;
    _srand(seed);

    var int ret = do
        #include "main.ceu"
    end;
    emit this.ok => ret;
end
var App app;
_printf("APP %d\n", sizeof(_CEU_App));

#include "timemachine.ceu"
#include "ui-timemachine.ceu"
var TimeMachine tm with
    this.app = app;
end;
var UITimeMachine uitm with
    this.tm = tm;
end;

//event void go_restart;
interface Global with
    var   TimeMachine& tm_;
    event bool in_tm?;
    var   bool blur?;
end
event bool in_tm?;
var   bool blur? = false;
var   TimeMachine& tm_ = tm;

class TimeKeyController with
    var int   k_alt, k_left, k_right;
    event void ok;
do
    global:blur? = true;
    emit global:in_tm? => true;
    emit global:tm_.go_on;

    par/or do
        var _SDL_KeyboardEvent* key = await SDL_KEYUP_
                                      until key:keysym.sym == this.k_alt;
    with
        loop do
            var _SDL_KeyboardEvent* key = await SDL_KEYDOWN_;
            var int sym2 = key:keysym.sym;
            if sym2 == this.k_left then
                emit global:tm_.go_backward => 2;
            else/if sym2 == this.k_right then
                emit global:tm_.go_forward => 2;
            end
            par/or do
                key = await SDL_KEYUP_ until key:keysym.sym == sym2;
            with
                every global:tm_.ok do
                    if global:tm_.time_total-global:tm_.time_now > 2000 then
                        break;
                    end
                end
            end
            emit global:tm_.go_pause;
        end
    end

    TM_AWAIT_SEEK(global:tm_);
    emit global:tm_.go_off;
    emit global:in_tm? => false;
    global:blur? = false;

    emit this.ok;
end

par/or do
    await SDL_QUIT_;
with
    loop do
        var _SDL_KeyboardEvent* key = await SDL_KEYDOWN_;
        var int sym = key:keysym.sym;
        if sym == _SDLK_ESCAPE then
            emit in_tm? => true;
            emit tm.go_on;
            emit uitm.go_on;
            key = await SDL_KEYDOWN_ until key:keysym.sym == _SDLK_ESCAPE;
            emit uitm.go_off;
            emit tm.go_off;
            emit in_tm? => false;
        else/if sym==_SDLK_LALT and _TIME1>0 then
            //_TIME1 = _TIME1 - 1;
            do TimeKeyController with
                this.k_alt   = _SDLK_LALT;
                this.k_left  = _SDLK_a;
                this.k_right = _SDLK_d;
            end;
        else/if sym==_SDLK_RALT and _TIME2>0 then
            //_TIME2 = _TIME2 - 1;
            do TimeKeyController with
                this.k_alt   = _SDLK_RALT;
                this.k_left  = _SDLK_LEFT;
                this.k_right = _SDLK_RIGHT;
            end;
        end
    end
with
    every SDL_REDRAW do
        emit uitm.go_redraw;
        if blur? then
            _boxRGBA(_REN, 0, 0, _REN_W, _REN_H, 0xAA,0x88,0x88,0x88);
        end
        _SDL_RenderPresent(_REN);
    end
with
    loop do
        var _SDL_KeyboardEvent* key = await SDL_KEYDOWN_
                                      until key:keysym.sym == _SDLK_LCTRL;
        var bool ok? =
            par do
                key = await SDL_KEYUP_ until key:keysym.sym == _SDLK_LCTRL;
                escape false;
            with
                await 1s;
                escape true;
            end;
        if not ok? then
            continue;
        end

        _CEU_TIMEMACHINE_ON = _CEU_TIMEMACHINE_ON + 1;
        finalize with
            _CEU_TIMEMACHINE_ON = _CEU_TIMEMACHINE_ON - 1;
        end

        pause/if in_tm? do
            par/or do
                loop do
                    key = await SDL_KEYDOWN_
                          until key:keysym.sym == _SDLK_LCTRL;
                    par/or do
                        key = await SDL_KEYUP_
                              until key:keysym.sym == _SDLK_LCTRL;
                    with
                        await 1s;
                        break;
                    end
                end
            with
                #include "input.ceu"
            end
        end
    end
end

escape 0;
