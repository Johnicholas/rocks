class KeyController with
    interface Controller;
    var int k_up, k_down, k_left, k_right;
    var int k_fire, k_shield;

    var int k_immortal;
    var int cheat_immortal? = 0;
do
    this.ax = 0;
    this.ay = 0;

    par do
        var _SDL_KeyboardEvent* key;
        every key = SDL_KEYDOWN do
            if key:keysym.sym == this.k_up then
                this.ay = -(_float)_REN_H/5000;
            else/if key:keysym.sym == this.k_down then
                this.ay =  (_float)_REN_H/5000;
            else/if key:keysym.sym == this.k_left then
                this.ax = -(_float)_REN_W/5000;
            else/if key:keysym.sym == this.k_right then
                this.ax =  (_float)_REN_W/5000;
            else/if key:keysym.sym == this.k_fire then
                emit this.ok_fired;
            else/if key:keysym.sym == this.k_shield then
                emit this.ok_shield;
            end
        end
    with
        var _SDL_KeyboardEvent* key;
        every key = SDL_KEYUP do
            if key:keysym.sym == this.k_up
            or key:keysym.sym == this.k_down then
                this.ay = 0;
            else/if key:keysym.sym == this.k_left
                 or key:keysym.sym == this.k_right then
                this.ax = 0;
            end
        end
    with
        // toggle cheat_immortal?
        var _SDL_KeyboardEvent* key;
        every key = SDL_KEYDOWN do
            if key:keysym.sym == this.k_immortal then
                this.cheat_immortal? = not this.cheat_immortal?;
            end
        end
    end
end

input _SDL_TouchFingerEvent* SDL_FINGERMOTION;
input _SDL_TouchFingerEvent* SDL_FINGERDOWN;
input _SDL_TouchFingerEvent* SDL_FINGERUP;

class TouchController with
    interface Controller;
    var _SDL_Rect move_r;
    var _SDL_Rect fire_r;
do
    this.ax = 0;
    this.ay = 0;

    par do
        // move
        loop do
            // await until FINGERDOWN on move area
            var _SDL_Point pt1;
            var _SDL_TouchFingerEvent* e1 =
                await SDL_FINGERDOWN until
                    _SDL_Rect_vs_Point(&move_r,
                                       _SDL_Touch2Point(&pt1,e1,_REN_W,_REN_H));

            // hold starting finger id
            var int id = e1:fingerId;

            par/or do
                // await until FINGERUP with the same finger
                var _SDL_TouchFingerEvent* e2 =
                    await SDL_FINGERUP until e2:fingerId == id;
                this.ax = 0;
                this.ay = 0;
            with
                // draw the starting finger point
                every SDL_REDRAW do
                    _filledCircleRGBA(_REN, pt1.x,pt1.y,10,
                                      0xFF,0x00,0x00,0x33);
                end
            with
                // change ax/ay depending on FINGERMOTION with the same finger
                loop do
                    var _SDL_TouchFingerEvent* e2 =
                        await SDL_FINGERMOTION until (e2:fingerId == id);
                    // TODO: 20 hardcoded
                    var _SDL_Point pt2;
                        pt2.x = e2:x * _REN_W;
                        pt2.y = e2:y * _REN_H;
                    if      pt2.x <= pt1.x-20 then
                        this.ax = -(_float)_REN_W/5000;
                    else/if pt2.x >= pt1.x+20 then
                        this.ax =  (_float)_REN_W/5000;
                    else
                        this.ax =  0;
                    end
                    if      pt2.y <= pt1.y-20 then
                        this.ay = -(_float)_REN_H/5000;
                    else/if pt2.y >= pt1.y+20 then
                        this.ay =  (_float)_REN_H/5000;
                    else
                        this.ay =  0;
                    end
                end
            end
        end
    with
        // fire
        loop do
            var _SDL_Point pt;
            var _SDL_TouchFingerEvent* e =
                await SDL_FINGERDOWN until
                    _SDL_Rect_vs_Point(&fire_r,
                                       _SDL_Touch2Point(&pt,e,_REN_W,_REN_H));
            emit this.ok_fired;
        end
    with
        // toggle cheat_immortal?
        // y-axis movement: H/2 -> H/2 (in "fire" side in < 1s)
        loop do
            // starting point in "fire" side
            var _SDL_Point pt1;
            var _SDL_TouchFingerEvent* e1 =
                await SDL_FINGERDOWN until
                    _SDL_Rect_vs_Point(&fire_r,
                                       _SDL_Touch2Point(&pt1,e1,_REN_W,_REN_H));

            // hold starting finger id
            var int id = e1:fingerId;

            par/or do
                await 1s;
            with
                // 2x H/2 movement with same finger
                var int count = 0;
                loop do
                    var _SDL_TouchFingerEvent* e2 =
                        await SDL_FINGERMOTION until (e2:fingerId == id);
                    var _SDL_Point pt2;
                        _SDL_Touch2Point(&pt2, e2, _REN_W, _REN_H);
                    var int dy = pt1.y - pt2.y;
                    if (dy > _REN_H/2) or (dy < -_REN_H/2) then
                        pt1 := pt2;
                            // copy not reference
                        count = count + 1;
                        if count == 2 then
                            break;
                        end
                    end
                end
                // finally
                this.cheat_immortal? = 1 - this.cheat_immortal?;
            end
        end
    end
end
