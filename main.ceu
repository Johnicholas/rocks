#include "sdl.ceu"
#include "sdl-gfx.ceu"
#include "colors.ceu"

/* TODO:
 * - PAUSE/IF salva img emostra pause em cima
 * - BONUS_ACCEL
 * - MENU: control-sides, reset-points
 * - start at 1/2 speed of previous match
 */

input void SDL_REDRAW;
input int  SDL_DT;
input void SDL_QUIT;
//input void SDL_APP_WILLENTERBACKGROUND;
input _SDL_KeyboardEvent* SDL_KEYDOWN;
input _SDL_KeyboardEvent* SDL_KEYUP;
input _SDL_TouchFingerEvent* SDL_FINGERDOWN;

/* Max number of instances for each class.
 * Use on each "spawn[n] ClassID".
 * Defines _OBJ_N avoiding buffer overflows in _OBJS
 */

#define _OBJ_SHIP_N     1       // x2
#define _OBJ_FIRE_N     3       // x2
#define _OBJ_ROCK_N     40
#define _OBJ_rock_N     40
#define _OBJ_BONUS_N    10
#define _OBJ_BOMB_N     5

#define _OBJ_N + 2*_OBJ_SHIP_N  \
               + 2*_OBJ_FIRE_N  \
               + _OBJ_ROCK_N    \
               + _OBJ_rock_N    \
               + _OBJ_BONUS_N   \
               + _OBJ_BOMB_N

native nohold _getVS();
native nohold _SDL_text2texture();
native do
    SDL_Renderer* REN = NULL;
    int REN_W, REN_H;

    enum {
        OBJ_NULL = 0,
        OBJ_SHIP1,
        OBJ_SHIP2,
        OBJ_FIRE1,
        OBJ_FIRE2,
        OBJ_ROCK,
        OBJ_rock,
        OBJ_BONUS_LIFE,
        OBJ_BONUS_HITS,
        OBJ_BONUS_SHIELD,
        OBJ_BONUS_FIRE,
        OBJ_BOMB,
        OBJ_EXPLOSION,
        OBJ_MAX
    };

    char idVSid[OBJ_MAX][OBJ_MAX] = {
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },    // NULL
        { 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 },    // SHIP1
        { 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 },    // SHIP2
        { 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1 },    // FIRE1
        { 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1 },    // FIRE2
        { 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },    // ROCK
        { 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },    // rock
        { 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0 },    // BONUS_LIFE
        { 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0 },    // BONUS_HITS
        { 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0 },    // BONUS_SHIELD
        { 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0 },    // BONUS_FIRE
        { 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },    // BOMB
        { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 },    // EXPLOSION
    };

    SDL_Texture* SDL_text2texture (SDL_Renderer* ren,
                                   TTF_Font* font, char* text,
                                   SDL_Color* fg, SDL_Color* bg)
    {
        // Text => Surface
        SDL_Surface* sfc;
        if (bg == NULL)
            sfc = TTF_RenderText_Blended(font, text, *fg);
        else
            sfc = TTF_RenderText_Shaded(font, text, *fg, *bg);

        // Surface => Texture
        SDL_Texture* tex = SDL_CreateTextureFromSurface(ren, sfc);
        SDL_FreeSurface(sfc);

        return tex;
    }
    void* OBJS[_OBJ_N];
    int OBJS_N = 0;
end

// SCREEN
    var _SDL_Window* win;
        finalize
            win = _SDL_CreateWindow("Rocks!", 500, 400, 1280, 800,
                                    _SDL_WINDOW_SHOWN);
        with
            _SDL_DestroyWindow(win);
        end
    _SDL_GetWindowSize(win, &_REN_W, &_REN_H);

    _REN = _SDL_CreateRenderer(win, -1, 0);
        finalize with
            _SDL_DestroyRenderer(_REN);
        end

// FONTS
    #include "fnts.ceu"
// TEXS
    #include "texs.ceu"
// SNDS
    #include "snds.ceu"

class Points with
    var int v = 0;
    var _SDL_Rect rect;
    event void inc;
do
    loop do
        var _SDL_Texture* tex;
        var _char[10] str;
        _sprintf(str, "%d", this.v);
        finalize
            tex = _SDL_text2texture(_REN, _FONT_BIG, str,
                                        &_colors.white, null);
        with
            _SDL_DestroyTexture(tex);
        end
        _SDL_QueryTexture(tex, null, null, &this.rect.w, &this.rect.h);

        par/or do
            await this.inc;
        with
            every SDL_REDRAW do
                var _SDL_Rect r = this.rect;
                    r.x = r.x - r.w/2;
                    r.y = r.y - r.h/2;
                _SDL_RenderCopy(_REN, tex, null, &r);
            end
        end

        this.v = v + 1;
    end
end

_srand(_time(null));

interface Controller with
    var _float ax, ay;
    event void ok_fired;
    event void ok_shield;

    var int cheat_immortal?;
end

#include "controllers.ceu"

interface Object with
    var int id;
    var _SDL_Rect rect;
    event int go_hit;
    native do
        int getVS (int id, CEU_Object** o1, CEU_Object** o2) {
            if (*_CEU_Object_id(*o1) == id) {
                return 1;
            } else if (*_CEU_Object_id(*o2) == id) {
                CEU_Object* tmp = *o1;
                *o1 = *o2;
                *o2 = tmp;
                return 1;
            } else {
                //*o1 = NULL;
                //*o2 = NULL;
                return 0;
            }
        }
    end
end

#include "objs.ceu"

par/or do
    await SDL_QUIT;
//with
    // TODO: battery: WaitTimeout??
    //await SDL_APP_WILLENTERBACKGROUND;
#ifdef SIMUL
with
    #include "simul.ceu"
#endif
with
    // background image
    var _SDL_Rect r;
        _SDL_QueryTexture(_TEX_BG, null, null, &r.w, &r.h);
        r.x = (_REN_W - r.w) / 2;
        r.y = (_REN_H - r.h) / 2;
    every SDL_REDRAW do
        _SDL_RenderCopy(_REN, _TEX_BG, null, &r);
    end
with
    var _SDL_Rect r1;
        r1.x = 50;
        r1.y = _REN_H - 50;
    var Points points1 with
        this.rect = r1;
    end;

    var _SDL_Rect r2;
        r2.x = _REN_W - 50;
        r2.y = _REN_H - 50;
    var Points points2 with
        this.rect = r2;
    end;

    loop do
    do
        // tap to start
        var _SDL_Rect r;
        _SDL_QueryTexture(_TEX_TAP, null, null, &r.w, &r.h);
            r.x = _REN_W/2 - r.w/2;
            r.y = _REN_H/2 - r.h/2;
        var int blink? = 0;
        par/or do
            await 1s;
#if defined(__ANDROID__) && !defined(SIMUL)
            await SDL_FINGERDOWN;
#else
            await SDL_KEYDOWN;
#endif
        with
            every 500ms do
                blink? = not blink?;
            end
        with
            every SDL_REDRAW do
                if not blink? then
                    _SDL_RenderCopy(_REN, _TEX_TAP, null, &r);
                end
            end
        end
        _Mix_PlayChannel(-1, _SND_START, 0);

#if defined(__ANDROID__) && !defined(SIMUL)
        var TouchController controller1 with
            this.move_r.x = 0;
            this.move_r.y = 0;
            this.move_r.w = _REN_W/2;
            this.move_r.h = _REN_H/2;
            this.fire_r.x = 0;
            this.fire_r.y = _REN_H/2;
            this.fire_r.w = _REN_W/2;
            this.fire_r.h = _REN_H/2;
        end;
#else
        var KeyController controller1 with
            this.k_up    = _SDLK_w;
            this.k_down  = _SDLK_s;
            this.k_left  = _SDLK_a;
            this.k_right = _SDLK_d;
            this.k_fire  = _SDLK_z;
            this.k_shield   = _SDLK_x;
            this.k_immortal = _SDLK_1;
        end;
#endif

        var int dim;    // dim = w
            _SDL_QueryTexture(_TEX_SHIP1, null, null, &dim, null);
        var Ship ship1 with
            this.id = _OBJ_SHIP1;
            this.tex = _TEX_SHIP1;
            this.rect.x = dim;
            this.rect.y = _REN_H/2;

            this.lim_x1 = dim/2;
            this.lim_x2 = _REN_W/2 - dim/2;
            this.lim_y1 = dim/2;
            this.lim_y2 = _REN_H - dim/2;

            this.dir        = 1;
            this.controller = &controller1;
        end;

#if defined(__ANDROID__) && !defined(SIMUL)
        var TouchController controller2 with
            this.move_r.x = _REN_W/2;
            this.move_r.y = _REN_H/2;
            this.move_r.w = _REN_W/2;
            this.move_r.h = _REN_H/2;
            this.fire_r.x = _REN_W/2;
            this.fire_r.y = 0;
            this.fire_r.w = _REN_W/2;
            this.fire_r.h = _REN_H/2;
        end;
#else
        var KeyController controller2 with
            this.k_up    = _SDLK_UP;
            this.k_down  = _SDLK_DOWN;
            this.k_left  = _SDLK_LEFT;
            this.k_right = _SDLK_RIGHT;
            this.k_fire  = _SDLK_SEMICOLON;
            this.k_shield   = _SDLK_PERIOD;
            this.k_immortal = _SDLK_0;
        end;
#endif

        var int dim;    // dim = w
            _SDL_QueryTexture(_TEX_SHIP2, null, null, &dim, null);
        var Ship ship2 with
            this.id = _OBJ_SHIP2;
            this.tex = _TEX_SHIP2;
            this.rect.x = _REN_W - dim;
            this.rect.y = _REN_H/2;

            this.lim_x1 = _REN_W/2 + dim/2;
            this.lim_x2 = _REN_W - dim/2;
            this.lim_y1 = dim/2;
            this.lim_y2 = _REN_H - dim/2;

            this.dir        = -1;
            this.controller = &controller2;
        end;

        par/or do
            await ship1.ok_killed;
            emit points2.inc;
        with
            await ship2.ok_killed;
            emit points1.inc;
        with
            var int freq = 2000;
            loop do
                var int dt = _rand() % freq;
                if freq > 50 then
                    freq = freq - 10;
                end
                await (dt)ms;
                spawn RockBig;
            end
        with
            every SDL_DT do
                finalize with
                    _OBJS_N = 0;
                end
                loop i, _OBJS_N do
                    var Object* o1 = (Object*) _OBJS[i];
                    _assert(o1 != null);

                    loop j, _OBJS_N-i-1 do
                        var Object* o2 = (Object*) _OBJS[i+1+j];
                        _assert(o2 != null);

                        var _SDL_Rect r1 = o1:rect;
                            r1.x = r1.x - r1.w/2;
                            r1.y = r1.y - r1.h/2;

                        var _SDL_Rect r2 = o2:rect;
                            r2.x = r2.x - r2.w/2;
                            r2.y = r2.y - r2.h/2;

                        if _SDL_HasIntersection(&r1, &r2) then
                            var Object* oo1;
                            var Object* oo2;

                            // ROCK sound vs FIRE
                            oo1 = o1;
                            oo2 = o2;
                            if _getVS(_OBJ_FIRE1, &oo1, &oo2) or
                               _getVS(_OBJ_FIRE2, &oo1, &oo2) then
                                if (oo2:id >= _OBJ_ROCK) and
                                   (oo2:id <= _OBJ_BONUS_FIRE) then
                                    _Mix_PlayChannel(-1, _SND_ROCK, 0);
                                end
                            else/if _getVS(_OBJ_SHIP1, &oo1, &oo2) or
                                    _getVS(_OBJ_SHIP2, &oo1, &oo2) then
                                if (oo2:id >= _OBJ_BONUS_LIFE) and
                                   (oo2:id <= _OBJ_BONUS_FIRE) then
                                    _Mix_PlayChannel(-1, _SND_BONUS, 0);
                                end
                            end

                            // BigRock vs Fire:
                            //  - 40%: spawn 2 small rocks
                            //  - 10%: spawn (+1)
                            //  - 10%: spawn (H)
                            //  - 10%: spawn (S)
                            //  - 15%: spawn (F)
                            //  - 15%: spawn (B)
                            oo1 = o1;
                            oo2 = o2;
                            if _getVS(_OBJ_ROCK, &oo1, &oo2) and
                               (oo2:id==_OBJ_FIRE1 or oo2:id==_OBJ_FIRE2) then
                                var int dir;
                                if oo2:id == _OBJ_FIRE1 then
                                    dir =  1;
                                else
                                    dir = -1;
                                end
                                var int pct = _rand() % 100;
                                if pct < 40 then
                                    loop i,2 do
                                        spawn RockSmall with
                                            this.rect.x = (int) oo2:rect.x;
                                            this.rect.y = (int) oo2:rect.y;
                                            this.dir    = dir;
                                        end;
                                    end
                                else/if pct < 50 then
                                    spawn Bonus with
                                        this.rect.x = (int) oo2:rect.x;
                                        this.rect.y = (int) oo2:rect.y;
                                        this.id     = _OBJ_BONUS_LIFE;
                                        this.tex    = _TEX_BONUS_LIFE;
                                        this.dir    = -dir;
                                    end;
                                else/if pct < 60 then
                                    spawn Bonus with
                                        this.rect.x = (int) oo2:rect.x;
                                        this.rect.y = (int) oo2:rect.y;
                                        this.id     = _OBJ_BONUS_HITS;
                                        this.tex    = _TEX_BONUS_HITS;
                                        this.dir    = -dir;
                                    end;
                                else/if pct < 70 then
                                    spawn Bonus with
                                        this.rect.x = (int) oo2:rect.x;
                                        this.rect.y = (int) oo2:rect.y;
                                        this.id     = _OBJ_BONUS_SHIELD;
                                        this.tex    = _TEX_BONUS_SHIELD;
                                        this.dir    = -dir;
                                    end;
                                else/if pct < 85 then
                                    spawn Bonus with
                                        this.rect.x = (int) oo2:rect.x;
                                        this.rect.y = (int) oo2:rect.y;
                                        this.id     = _OBJ_BONUS_FIRE;
                                        this.tex    = _TEX_BONUS_FIRE;
                                        this.dir    = -dir;
                                    end;
                                else
                                    spawn Bomb with
                                        this.rect.x = (int) oo2:rect.x;
                                        this.rect.y = (int) oo2:rect.y;
                                        this.dir    = dir;
                                    end;
                                end
                            end

                            // BonusLife vs Ship: points++
                            oo1 = o1;
                            oo2 = o2;
                            if _getVS(_OBJ_BONUS_LIFE, &oo1, &oo2) then
                                if oo2:id == _OBJ_SHIP1 then
                                    emit points1.inc;
                                else/if oo2:id == _OBJ_SHIP2 then
                                    emit points2.inc;
                                end
                            end

                            // BonusHits vs Ship: go_hit => +1
                            oo1 = o1;
                            oo2 = o2;
                            if _getVS(_OBJ_BONUS_HITS, &oo1, &oo2) then
                                if (oo2:id == _OBJ_SHIP1) or
                                   (oo2:id == _OBJ_SHIP2) then
                                    emit oo2:go_hit => 1;
                                end
                            end

                            // BonusShield vs Ship: go_shield
                            oo1 = o1;
                            oo2 = o2;
                            if _getVS(_OBJ_BONUS_SHIELD, &oo1, &oo2) then
                                if oo2:id == _OBJ_SHIP1 or
                                   oo2:id == _OBJ_SHIP2 then
                                    var Ship* ship = (Ship*) oo2;
                                    emit ship:go_shield;
                                end
                            end

                            // BonusFire vs Ship: fire.rect.w++
                            oo1 = o1;
                            oo2 = o2;
                            if _getVS(_OBJ_BONUS_FIRE, &oo1, &oo2) then
                                if oo2:id == _OBJ_SHIP1 or
                                   oo2:id == _OBJ_SHIP2 then
                                    var Ship* ship = (Ship*) oo2;
                                    ship:fire_w = ship:fire_w + 1;
                                end
                            end

                            // "go_hit" must be in the end
                            var int id1 = o1:id;
                            var int id2 = o2:id;
                            if _idVSid[id1][id2] then
                                emit o2:go_hit => -1;
                            end
                            if _idVSid[id2][id1] then
                                emit o1:go_hit => -1;
                            end
                        end
                    end
                end
            end
        end
    end
    end
#ifdef DEBUG
with
    // calculate FPS
    var int fps = 0;
    loop do
        var int c = 0;

        var _char[5] str;
        _sprintf(str, "%d", fps);
        var _SDL_Texture* tex;
        finalize
            tex = _SDL_text2texture(_REN, _FONT_SMALL, str,
                                    &_colors.white, null);
        with
            _SDL_DestroyTexture(tex);
        end
        par/or do
            every SDL_REDRAW do
                c = c + 1;
                var _SDL_Rect r;
                    r.x = 200;
                    r.y = 200;
                    r.w = 30;
                    r.h = 30;
                _SDL_RenderCopy(_REN, tex, null, &r);
            end
        with
            await 1s;
        end
        fps = c;
        //_printf("[FPS=%d]\n", fps);
    end
#endif
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

return 0;
