#include "sdl.ceu"
#include "sdl-gfx.ceu"
#include "colors.ceu"
#include "ui-texture.ceu"

/* TODO:
 * - OBJ_BOMB[1,2] two-fingers tap
 *   (fire: DOWN->UP for one finger)
 * - ENERGY (keep everything) + LIFE
 *   bonus for both
 * - PAUSE/IF salva img emostra pause em cima
 * - OBJS lenght (sum of all)
 * - SHIP expl.
 * - cheats
 * - sound effects
 */

input void SDL_REDRAW;
input int  SDL_DT;
input void SDL_QUIT;
input _SDL_KeyboardEvent* SDL_KEYDOWN;
input _SDL_KeyboardEvent* SDL_KEYUP;

native nohold _getVS();
native do
    SDL_Renderer* REN = NULL;
    int REN_W, REN_H;

    enum {
        OBJ_NULL = 0,
        OBJ_SHIP1,
        OBJ_SHIP2,
        OBJ_FIRE1,
        OBJ_FIRE2,
        OBJ_ROCK,
        OBJ_rock,
        OBJ_BONUS_LIFE,
        OBJ_BONUS_BOMB,
        OBJ_BONUS_FIRE,
        OBJ_MAX
    };

    char idVSid[OBJ_MAX][OBJ_MAX] = {
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },    // NULL
        { 0, 0, 1, 0, 1, 1, 1, 1, 1, 1 },    // SHIP1
        { 0, 1, 0, 1, 0, 1, 1, 1, 1, 1 },    // SHIP2
        { 0, 0, 1, 0, 1, 1, 1, 1, 1, 1 },    // FIRE1
        { 0, 1, 0, 1, 0, 1, 1, 1, 1, 1 },    // FIRE2
        { 0, 1, 1, 1, 1, 0, 0, 0, 0, 0 },    // ROCK
        { 0, 1, 1, 1, 1, 0, 0, 0, 0, 0 },    // rock
        { 0, 0, 0, 1, 1, 0, 0, 0, 0, 0 },    // BONUS_LIFE
        { 0, 1, 1, 1, 1, 0, 0, 0, 0, 0 },    // BONUS_BOMB
        { 0, 0, 0, 1, 1, 0, 0, 0, 0, 0 },    // BONUS_FIRE
    };

    void* OBJS[30];
    int OBJS_N = 0;
end

// SCREEN
    var _SDL_Window* win;
        finalize
            win = _SDL_CreateWindow("Rocks!", 500, 400, 640, 480,
                                    _SDL_WINDOW_SHOWN);
        with
            _SDL_DestroyWindow(win);
        end
    _SDL_GetWindowSize(win, &_REN_W, &_REN_H);

    _REN = _SDL_CreateRenderer(win, -1, 0);
        finalize with
            _SDL_DestroyRenderer(_REN);
        end

// FONT
    native do
        TTF_Font* FONT_BIG;
        TTF_Font* FONT_SMALL;
    end
    _TTF_Init();
        finalize with
            _TTF_Quit();
        end
    _FONT_BIG = _TTF_OpenFont("fnts/vera.ttf", _REN_H/20);
        finalize with
            _TTF_CloseFont(_FONT_BIG);
        end
    _assert(_FONT_BIG != null);
    _FONT_SMALL = _TTF_OpenFont("fnts/vera.ttf", _REN_H/40);
        finalize with
            _TTF_CloseFont(_FONT_SMALL);
        end
    _assert(_FONT_SMALL != null);


// TEXS
    native do
        SDL_Texture* TEX_BG         = NULL;
        SDL_Texture* TEX_SHIP1      = NULL;
        SDL_Texture* TEX_SHIP2      = NULL;
        SDL_Texture* TEX_ROCK       = NULL;
        SDL_Texture* TEX_rock       = NULL;
        SDL_Texture* TEX_BONUS_LIFE = NULL;
        SDL_Texture* TEX_BONUS_FIRE = NULL;
        SDL_Texture* TEX_BONUS_BOMB[3];
    end
    _TEX_BG = _IMG_LoadTexture(_REN, "imgs/bg.png");
        finalize with
            _SDL_DestroyTexture(_TEX_BG);
        end
    _TEX_SHIP1 = _IMG_LoadTexture(_REN, "imgs/ship_1.gif");
        finalize with
            _SDL_DestroyTexture(_TEX_SHIP1);
        end
    _TEX_SHIP2 = _IMG_LoadTexture(_REN, "imgs/ship_2.gif");
        finalize with
            _SDL_DestroyTexture(_TEX_SHIP2);
        end
    _TEX_ROCK = _IMG_LoadTexture(_REN, "imgs/rock_big.gif");
        finalize with
            _SDL_DestroyTexture(_TEX_ROCK);
        end
    _TEX_rock = _IMG_LoadTexture(_REN, "imgs/rock_small.gif");
        finalize with
            _SDL_DestroyTexture(_TEX_rock);
        end
    _TEX_BONUS_LIFE = _SDL_text2texture(_REN, _FONT_SMALL, "+1",
                                        &_colors.white, null);
        finalize with
            _SDL_DestroyTexture(_TEX_BONUS_LIFE);
        end
    _TEX_BONUS_FIRE = _SDL_text2texture(_REN, _FONT_SMALL, "F",
                                        &_colors.white, null);
        finalize with
            _SDL_DestroyTexture(_TEX_BONUS_FIRE);
        end
    loop i, 3 do
        var _char[5] str;
        _sprintf(str, "%d", i+1);
        _TEX_BONUS_BOMB[i] = _SDL_text2texture(_REN, _FONT_SMALL, str,
                                               &_colors.white, null);
    end
        finalize with
            loop i, 3 do
                _SDL_DestroyTexture(_TEX_BONUS_BOMB[i]);
            end
        end
    _assert(_TEX_BG         != null);
    _assert(_TEX_SHIP1      != null);
    _assert(_TEX_SHIP2      != null);
    _assert(_TEX_ROCK       != null);
    _assert(_TEX_rock       != null);
    _assert(_TEX_BONUS_LIFE != null);
    _assert(_TEX_BONUS_FIRE != null);
    loop i, 3 do
        _assert(_TEX_BONUS_BOMB[i] != null);
    end

// SNDS
    _Mix_OpenAudio(22050, _AUDIO_S16SYS, 2, 4096);
        finalize with
            _Mix_CloseAudio();            // TODO: slow
        end

/*
    native do
        Mix_Music* SND_BG = NULL;
    end
    _SND_BG = _Mix_LoadMUS("snds/space_sprinkles.mp3");
        finalize with
            _Mix_FreeMusic(_SND_BG);
        end
        _assert(_SND_BG != null);

    _Mix_PlayMusic(_SND_BG, -1);
    //_Mix_HaltMusic();
*/

class Points with
    var int v = 0;
    var _SDL_Rect rect;
    event void inc;
do
    loop do
        var _SDL_Texture* tex;
        var _char[10] str;
        _sprintf(str, "%d", this.v);
        finalize
            tex = _SDL_text2texture(_REN, _FONT_BIG, str,
                                        &_colors.white, null);
        with
            _SDL_DestroyTexture(tex);
        end
        var UITexture ui with
            this.ren = _REN;
            this.tex = tex;
        end;
        ui._go(&this.rect);

        await this.inc;
        this.v = v + 1;
    end
end

_srand(_time(null));

interface Controller with
    var _float ax, ay;
    event void ok_fired;
end

#include "controllers.ceu"

interface Object with
    var int id;
    var _SDL_Rect rect;
    event void go_kill;
    native do
        int getVS (int id, CEU_Object** o1, CEU_Object** o2) {
            if (*_CEU_Object_id(*o1) == id) {
                return 1;
            } else if (*_CEU_Object_id(*o2) == id) {
                CEU_Object* tmp = *o1;
                *o1 = *o2;
                *o2 = tmp;
                return 1;
            } else {
                *o1 = NULL;
                *o2 = NULL;
                return 0;
            }
        }
    end
end

#include "objs.ceu"

par/or do
    await SDL_QUIT;
//with
    //#include "simul.ceu"
with
    every SDL_REDRAW do
        _boxRGBA(_REN, 0,0, _REN_W,_REN_H, 0,0,0, 0xFF);
    end
with
    var UITexture bg with
        this.ren = _REN;
        this.tex = _TEX_BG;
    end;
    var _SDL_Rect r;
        r.x = _REN_W / 2;
        r.y = _REN_H / 2;
    bg._go(&r);

    var _SDL_Rect r1;
        r1.x = 50;
        r1.y = _REN_H - 50;
    var Points points1 with
        this.rect = r1;
    end;

    var _SDL_Rect r2;
        r2.x = _REN_W - 50;
        r2.y = _REN_H - 50;
    var Points points2 with
        this.rect = r2;
    end;

    loop do
    do
#ifdef __ANDROID__
        var TouchController controller1 with
            this.move_r.x = 0;
            this.move_r.y = 0;
            this.move_r.w = _REN_W/2;
            this.move_r.h = _REN_H/2;
            this.fire_r.x = 0;
            this.fire_r.y = _REN_H/2;
            this.fire_r.w = _REN_W/2;
            this.fire_r.h = _REN_H/2;
        end;
#else
        var KeyController controller1 with
            this.k_up    = _SDLK_w;
            this.k_down  = _SDLK_s;
            this.k_left  = _SDLK_a;
            this.k_right = _SDLK_d;
            this.k_fire  = _SDLK_z;
        end;
#endif

        var Ship ship1 with
            this.id = _OBJ_SHIP1;
            this.tex = _TEX_SHIP1;
            this.rect.x = 30;
            this.rect.y = _REN_H/2;

            this.lim_x1 = this.rect.w/2;
            this.lim_x2 = _REN_W/2 - this.rect.w/2;
            this.lim_y1 = this.rect.h/2;
            this.lim_y2 = _REN_H - this.rect.h/2;

            this.dir        = 1;
            this.controller = &controller1;
        end;

#ifdef __ANDROID__
        var TouchController controller2 with
            this.move_r.x = _REN_W/2;
            this.move_r.y = _REN_H/2;
            this.move_r.w = _REN_W/2;
            this.move_r.h = _REN_H/2;
            this.fire_r.x = _REN_W/2;
            this.fire_r.y = 0;
            this.fire_r.w = _REN_W/2;
            this.fire_r.h = _REN_H/2;
        end;
#else
        var KeyController controller2 with
            this.k_up    = _SDLK_UP;
            this.k_down  = _SDLK_DOWN;
            this.k_left  = _SDLK_LEFT;
            this.k_right = _SDLK_RIGHT;
            this.k_fire  = _SDLK_SEMICOLON;
        end;
#endif

        var Ship ship2 with
            this.id = _OBJ_SHIP2;
            this.tex = _TEX_SHIP2;
            this.rect.x = _REN_W - 30;
            this.rect.y = _REN_H/2;

            this.lim_x1 = _REN_W/2 + this.rect.w/2;
            this.lim_x2 = _REN_W - this.rect.w/2;
            this.lim_y1 = this.rect.h/2;
            this.lim_y2 = _REN_H - this.rect.h/2;

            this.dir        = -1;
            this.controller = &controller2;
        end;

        par/or do
            await ship1.ok_killed;
            emit points2.inc;
        with
            await ship2.ok_killed;
            emit points1.inc;
        with
            loop do
                var int dt = 500 + _rand()%2000;
                await (dt)ms;
                spawn RockBig;
            end
        with
            every SDL_DT do
                finalize with
                    _OBJS_N = 0;
                end
                loop i, _OBJS_N do
                    var Object* o1 = (Object*) _OBJS[i];
                    _assert(o1 != null);

                    loop j, _OBJS_N-i-1 do
                        var Object* o2 = (Object*) _OBJS[i+1+j];
                        _assert(o2 != null);

                        var _SDL_Rect r1 = o1:rect;
                            r1.x = r1.x - r1.w/2;
                            r1.y = r1.y - r1.h/2;

                        var _SDL_Rect r2 = o2:rect;
                            r2.x = r2.x - r2.w/2;
                            r2.y = r2.y - r2.h/2;

                        if _SDL_HasIntersection(&r1, &r2) then
                            var Object* oo1;
                            var Object* oo2;

                            // BigRock vs Fire:
                            //  - 60%: spawn 2 small rocks
                            //  - 10%: spawn 1-up
                            //  - 10%: spawn fire width
                            //  - 20%: spawn bomb
                            oo1 = o1;
                            oo2 = o2;
                            if _getVS(_OBJ_ROCK, &oo1, &oo2) and
                               (oo2:id==_OBJ_FIRE1 or oo2:id==_OBJ_FIRE2) then
                                var int dir;
                                if oo2:id == _OBJ_FIRE1 then
                                    dir =  1;
                                else
                                    dir = -1;
                                end
                                var int pct = _rand() % 100;
                                if pct < 60 then
                                    loop i,2 do
                                        spawn RockSmall with
                                            this.rect.x = (int) oo2:rect.x;
                                            this.rect.y = (int) oo2:rect.y;
                                            this.dir    = dir;
                                        end;
                                    end
                                else/if pct < 70 then
                                    spawn BonusLife with
                                        this.rect.x = (int) oo2:rect.x;
                                        this.rect.y = (int) oo2:rect.y;
                                        this.dir    = -dir;
                                    end;
                                else/if pct < 80 then
                                    spawn BonusFire with
                                        this.rect.x = (int) oo2:rect.x;
                                        this.rect.y = (int) oo2:rect.y;
                                        this.dir    = -dir;
                                    end;
                                else
                                    spawn BonusBomb with
                                        this.rect.x = (int) oo2:rect.x;
                                        this.rect.y = (int) oo2:rect.y;
                                        this.dir    = dir;
                                    end;
                                end
                            end

                            // BonusLife vs Ship: points++
                            oo1 = o1;
                            oo2 = o2;
                            if _getVS(_OBJ_BONUS_LIFE, &oo1, &oo2) then
                                if oo2:id == _OBJ_SHIP1 then
                                    emit points1.inc;
                                else/if oo2:id == _OBJ_SHIP2 then
                                    emit points2.inc;
                                end
                            end

                            // BonusFire vs Ship: fire.rect.w++
                            oo1 = o1;
                            oo2 = o2;
                            if _getVS(_OBJ_BONUS_FIRE, &oo1, &oo2) then
                                if oo2:id == _OBJ_SHIP1 or
                                   oo2:id == _OBJ_SHIP2 then
                                    var Ship* ship = (Ship*) oo2;
                                    ship:fire_w = ship:fire_w + 1;
                                end
                            end

                            // "go_kill" must be in the end
                            var int id1 = o1:id;
                            var int id2 = o2:id;
                            if _idVSid[id1][id2] then
                                emit o2:go_kill;
                            end
                            if _idVSid[id2][id1] then
                                emit o1:go_kill;
                            end
                        end
                    end
                end
            end
        end
    end
    end
#ifdef DEBUG
with
    // calculate FPS
    var int fps = 0;
    loop do
        var int c = 0;

        var _char[5] str;
        _sprintf(str, "%d", fps);
        var _SDL_Texture* tex;
        finalize
            tex = _SDL_text2texture(_REN, _FONT_SMALL, str,
                                    &_colors.white, null);
        with
            _SDL_DestroyTexture(tex);
        end
        par/or do
            every SDL_REDRAW do
                c = c + 1;
                var _SDL_Rect r;
                    r.x = 200;
                    r.y = 200;
                    r.w = 30;
                    r.h = 30;
                _SDL_RenderCopy(_REN, tex, null, &r);
            end
        with
            await 1s;
        end
        fps = c;
        _printf("[FPS=%d]\n", fps);
    end
#endif
with
    every SDL_REDRAW do
        _SDL_RenderPresent(_REN);
    end
end

return 0;
